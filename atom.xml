<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>halomzh.github.io</title>
  
  
  <link href="https://halomzh.github.io/atom.xml" rel="self"/>
  
  <link href="https://halomzh.github.io/"/>
  <updated>2020-09-18T05:07:51.346Z</updated>
  <id>https://halomzh.github.io/</id>
  
  <author>
    <name>halomzh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Annotation的IOC初始化</title>
    <link href="https://halomzh.github.io/2020/09/18/%E5%9F%BA%E4%BA%8EAnnotation%E7%9A%84IOC%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://halomzh.github.io/2020/09/18/%E5%9F%BA%E4%BA%8EAnnotation%E7%9A%84IOC%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2020-09-18T05:07:24.000Z</published>
    <updated>2020-09-18T05:07:51.346Z</updated>
    
    <content type="html"><![CDATA[<p>#Spring IOC 容器注解<br>Spring IOC 容器对于类级别的注解和类内部的注解分以下两种处理策略：</p><p>1)、类级别的注解：如@Component、@Repository、@Controller、@Service 以及JavaEE6 的@ManagedBean 和@Named 注解，都是添加在类上面的类级别注解，Spring 容器根据注解的过滤规则扫描读取注解Bean 定义类，并将其注册到Spring IOC 容器中。</p><p>2)、类内部的注解：如@Autowire、@Value、@Resource 以及EJB 和WebService 相关的注解等，都是添加在类内部的字段或者方法上的类内部注解，SpringIOC 容器通过Bean 后置注解处理器解析Bean 内部的注解。</p><p>#定位Bean 扫描路径<br>Spring 中管理注解Bean 定义的容器有两个： AnnotationConfigApplicationContext 和AnnotationConfigWebApplicationContex。</p><p>这两个类是专门处理Spring 注解方式配置的容器，直接依赖于注解作为容器配置信息来源的IOC 容器。AnnotationConfigWebApplicationContext 是AnnotationConfigApplicationContext 的Web 版本。</p><p>现在我们以AnnotationConfigApplicationContext 为例看看它的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public class AnnotationConfigApplicationContext extends GenericApplicationContext implements</span><br><span class="line">        AnnotationConfigRegistry &#123;</span><br><span class="line">    &#x2F;&#x2F;保存一个读取注解的Bean 定义读取器，并将其设置到容器中</span><br><span class="line">    private final AnnotatedBeanDefinitionReader reader;</span><br><span class="line">    &#x2F;&#x2F;保存一个扫描指定类路径中注解Bean 定义的扫描器，并将其设置到容器中</span><br><span class="line">    private final ClassPathBeanDefinitionScanner scanner;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;默认构造函数，初始化一个空容器，容器不包含任何Bean 信息，需要在稍后通过调用其register()</span><br><span class="line">    &#x2F;&#x2F;方法注册配置类，并调用refresh()方法刷新容器，触发容器对注解Bean 的载入、解析和注册过程</span><br><span class="line">    public AnnotationConfigApplicationContext() &#123;</span><br><span class="line">        this.reader &#x3D; new AnnotatedBeanDefinitionReader(this);</span><br><span class="line">        this.scanner &#x3D; new ClassPathBeanDefinitionScanner(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AnnotationConfigApplicationContext(DefaultListableBeanFactory beanFactory) &#123;</span><br><span class="line">        super(beanFactory);</span><br><span class="line">        this.reader &#x3D; new AnnotatedBeanDefinitionReader(this);</span><br><span class="line">        this.scanner &#x3D; new ClassPathBeanDefinitionScanner(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;最常用的构造函数，通过将涉及到的配置类传递给该构造函数，以实现将相应配置类中的Bean 自动注册到容器中</span><br><span class="line">    public AnnotationConfigApplicationContext(Class&lt;?&gt;... annotatedClasses) &#123;</span><br><span class="line">        this();</span><br><span class="line">        register(annotatedClasses);</span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;该构造函数会自动扫描以给定的包及其子包下的所有类，并自动识别所有的Spring Bean，将其注册到容器中</span><br><span class="line">    public AnnotationConfigApplicationContext(String... basePackages) &#123;</span><br><span class="line">        this();</span><br><span class="line">        scan(basePackages);</span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setEnvironment(ConfigurableEnvironment environment) &#123;</span><br><span class="line">        super.setEnvironment(environment);</span><br><span class="line">        this.reader.setEnvironment(environment);</span><br><span class="line">        this.scanner.setEnvironment(environment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;为容器的注解Bean 读取器和注解Bean 扫描器设置Bean 名称产生器</span><br><span class="line">    public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) &#123;</span><br><span class="line">        this.reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        this.scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        getBeanFactory().registerSingleton(</span><br><span class="line">                AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;为容器的注解Bean 读取器和注解Bean 扫描器设置作用范围元信息解析器</span><br><span class="line">    public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) &#123;</span><br><span class="line">        this.reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">        this.scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;为容器注册一个要被处理的注解Bean，新注册的Bean，必须手动调用容器的</span><br><span class="line">    &#x2F;&#x2F;refresh()方法刷新容器，触发容器对新注册的Bean 的处理</span><br><span class="line">    public void register(Class&lt;?&gt;... annotatedClasses) &#123;</span><br><span class="line">        Assert.notEmpty(annotatedClasses, &quot;At least one annotated class must be specified&quot;);</span><br><span class="line">        this.reader.register(annotatedClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;扫描指定包路径及其子包下的注解类，为了使新添加的类被处理，必须手动调用</span><br><span class="line">    &#x2F;&#x2F;refresh()方法刷新容器</span><br><span class="line">    public void scan(String... basePackages) &#123;</span><br><span class="line">        Assert.notEmpty(basePackages, &quot;At least one base package must be specified&quot;);</span><br><span class="line">        this.scanner.scan(basePackages);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的源码分析，我们可以看啊到Spring 对注解的处理分为两种方式：</p><p>1)、直接将注解Bean 注册到容器中<br>可以在初始化容器时注册；也可以在容器创建之后手动调用注册方法向容器注册，然后通过手动刷新容器，使得容器对注册的注解Bean 进行处理。</p><p>2)、通过扫描指定的包及其子包下的所有类<br>在初始化注解容器时指定要自动扫描的路径，如果容器创建以后向给定路径动态添加了注解Bean，则需要手动调用容器扫描的方法，然后手动刷新容器，使得容器对所注册的Bean 进行处理。</p><p>接下来，将会对两种处理方式详细分析其实现过程。<br>#读取Annotation 元数据<br>当创建注解处理容器时，如果传入的初始参数是具体的注解Bean 定义类时，注解容器读取并注册。<br>##1)、AnnotationConfigApplicationContext 通过调用注解Bean 定义读取器<br>AnnotatedBeanDefinitionReader 的register()方法向容器注册指定的注解Bean，注解Bean 定义读取器向容器注册注解Bean 的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注册多个注解Bean 定义类</span><br><span class="line">public void register(Class&lt;?&gt;... annotatedClasses) &#123;</span><br><span class="line">    for (Class&lt;?&gt; annotatedClass : annotatedClasses) &#123;</span><br><span class="line">        registerBean(annotatedClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;注册一个注解Bean 定义类</span><br><span class="line">public void registerBean(Class&lt;?&gt; annotatedClass) &#123;</span><br><span class="line">    doRegisterBean(annotatedClass, null, null, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public &lt;T&gt; void registerBean(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier) &#123;</span><br><span class="line">    doRegisterBean(annotatedClass, instanceSupplier, null, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public &lt;T&gt; void registerBean(Class&lt;T&gt; annotatedClass, String name, @Nullable Supplier&lt;T&gt; instanceSupplier) &#123;</span><br><span class="line">    doRegisterBean(annotatedClass, instanceSupplier, name, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Bean 定义读取器注册注解Bean 定义的入口方法</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public void registerBean(Class&lt;?&gt; annotatedClass, Class&lt;? extends Annotation&gt;... qualifiers) &#123;</span><br><span class="line">    doRegisterBean(annotatedClass, null, null, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Bean 定义读取器向容器注册注解Bean 定义类</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public void registerBean(Class&lt;?&gt; annotatedClass, String name, Class&lt;? extends Annotation&gt;... qualifiers) &#123;</span><br><span class="line">    doRegisterBean(annotatedClass, null, name, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Bean 定义读取器向容器注册注解Bean 定义类</span><br><span class="line">&lt;T&gt; void doRegisterBean(Class&lt;T&gt; annotatedClass, @Nullable Supplier&lt;T&gt; instanceSupplier, @Nullable String name,</span><br><span class="line">                        @Nullable Class&lt;? extends Annotation&gt;[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers) &#123;</span><br><span class="line">    &#x2F;&#x2F;根据指定的注解Bean 定义类，创建Spring 容器中对注解Bean 的封装的数据结构</span><br><span class="line">    AnnotatedGenericBeanDefinition abd &#x3D; new AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line">    if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    abd.setInstanceSupplier(instanceSupplier);</span><br><span class="line">    &#x2F;&#x2F;解析注解Bean 定义的作用域，若@Scope(&quot;prototype&quot;)，则Bean 为原型类型；</span><br><span class="line">    &#x2F;&#x2F;若@Scope(&quot;singleton&quot;)，则Bean 为单态类型</span><br><span class="line">    ScopeMetadata scopeMetadata &#x3D; this.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">    &#x2F;&#x2F;为注解Bean 定义设置作用域</span><br><span class="line">    abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">    &#x2F;&#x2F;为注解Bean 定义生成Bean 名称</span><br><span class="line">    String beanName &#x3D; (name !&#x3D; null ? name : this.beanNameGenerator.generateBeanName(abd, this.registry));</span><br><span class="line">    &#x2F;&#x2F;处理注解Bean 定义中的通用注解</span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">    &#x2F;&#x2F;如果在向容器注册注解Bean 定义时，使用了额外的限定符注解，则解析限定符注解。</span><br><span class="line">    &#x2F;&#x2F;主要是配置的关于autowiring 自动依赖注入装配的限定条件，即@Qualifier 注解</span><br><span class="line">    &#x2F;&#x2F;Spring 自动依赖注入装配默认是按类型装配，如果使用@Qualifier 则按名称</span><br><span class="line">    if (qualifiers !&#x3D; null) &#123;</span><br><span class="line">        for (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line">            &#x2F;&#x2F;如果配置了@Primary 注解，设置该Bean 为autowiring 自动依赖注入装&#x2F;&#x2F;配时的首选</span><br><span class="line">            if (Primary.class &#x3D;&#x3D; qualifier) &#123;</span><br><span class="line">                abd.setPrimary(true);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;如果配置了@Lazy 注解，则设置该Bean 为非延迟初始化，如果没有配置，</span><br><span class="line">            &#x2F;&#x2F;则该Bean 为预实例化</span><br><span class="line">            else if (Lazy.class &#x3D;&#x3D; qualifier) &#123;</span><br><span class="line">                abd.setLazyInit(true);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;如果使用了除@Primary 和@Lazy 以外的其他注解，则为该Bean 添加一</span><br><span class="line">            &#x2F;&#x2F;个autowiring 自动依赖注入装配限定符，该Bean 在进autowiring</span><br><span class="line">            &#x2F;&#x2F;自动依赖注入装配时，根据名称装配限定符指定的Bean</span><br><span class="line">            else &#123;</span><br><span class="line">                abd.addQualifier(new AutowireCandidateQualifier(qualifier));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (BeanDefinitionCustomizer customizer : definitionCustomizers) &#123;</span><br><span class="line">        customizer.customize(abd);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;创建一个指定Bean 名称的Bean 定义对象，封装注解Bean 定义类数据</span><br><span class="line">    BeanDefinitionHolder definitionHolder &#x3D; new BeanDefinitionHolder(abd, beanName);</span><br><span class="line">    &#x2F;&#x2F;根据注解Bean 定义类中配置的作用域，创建相应的代理对象</span><br><span class="line">    definitionHolder &#x3D; AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder,</span><br><span class="line">            this.registry);</span><br><span class="line">    &#x2F;&#x2F;向IOC 容器注册注解Bean 类定义对象</span><br><span class="line">    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码我们可以看出，注册注解Bean 定义类的基本步骤：<br>a、需要使用注解元数据解析器解析注解Bean 中关于作用域的配置。<br>b、使用AnnotationConfigUtils 的processCommonDefinitionAnnotations()方法处理注解Bean 定义类中通用的注解。<br>c、使用AnnotationConfigUtils 的applyScopedProxyMode()方法创建对于作用域的代理对象。<br>d、通过BeanDefinitionReaderUtils 向容器注册Bean。</p><p>下面我们继续分析这4 步的具体实现过程<br>##2)、AnnotationScopeMetadataResolver 解析作用域元数据<br>AnnotationScopeMetadataResolver 通过resolveScopeMetadata()方法解析注解Bean 定义类的作用域元信息，即判断注册的Bean 是原生类型(prototype)还是单态(singleton)类型，其源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;解析注解Bean 定义类中的作用域元信息</span><br><span class="line">@Override</span><br><span class="line">public ScopeMetadata resolveScopeMetadata(BeanDefinition definition) &#123;</span><br><span class="line">    ScopeMetadata metadata &#x3D; new ScopeMetadata();</span><br><span class="line">    if (definition instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">        AnnotatedBeanDefinition annDef &#x3D; (AnnotatedBeanDefinition) definition;</span><br><span class="line">        &#x2F;&#x2F;从注解Bean 定义类的属性中查找属性为”Scope”的值，即@Scope 注解的值</span><br><span class="line">        &#x2F;&#x2F;annDef.getMetadata().getAnnotationAttributes 方法将Bean</span><br><span class="line">        &#x2F;&#x2F;中所有的注解和注解的值存放在一个map 集合中</span><br><span class="line">        AnnotationAttributes attributes &#x3D; AnnotationConfigUtils.attributesFor(</span><br><span class="line">                annDef.getMetadata(), this.scopeAnnotationType);</span><br><span class="line">        &#x2F;&#x2F;将获取到的@Scope 注解的值设置到要返回的对象中</span><br><span class="line">        if (attributes !&#x3D; null) &#123;</span><br><span class="line">            metadata.setScopeName(attributes.getString(&quot;value&quot;));</span><br><span class="line">            &#x2F;&#x2F;获取@Scope 注解中的proxyMode 属性值，在创建代理对象时会用到</span><br><span class="line">            ScopedProxyMode proxyMode &#x3D; attributes.getEnum(&quot;proxyMode&quot;);</span><br><span class="line">            &#x2F;&#x2F;如果@Scope 的proxyMode 属性为DEFAULT 或者NO</span><br><span class="line">            if (proxyMode &#x3D;&#x3D; ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">                &#x2F;&#x2F;设置proxyMode 为NO</span><br><span class="line">                proxyMode &#x3D; this.defaultProxyMode;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;为返回的元数据设置proxyMode</span><br><span class="line">            metadata.setScopedProxyMode(proxyMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;返回解析的作用域元信息对象</span><br><span class="line">    return metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的annDef.getMetadata().getAnnotationAttributes()方法就是获取对象中指定类型的注解的值。</p><p>##3)、AnnotationConfigUtils 处理注解Bean 定义类中的通用注解<br>AnnotationConfigUtils 类的processCommonDefinitionAnnotations()在向容器注册Bean 之前，首先对注解Bean 定义类中的通用Spring 注解进行处理，源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;处理Bean 定义中通用注解</span><br><span class="line">static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) &#123;</span><br><span class="line">    AnnotationAttributes lazy &#x3D; attributesFor(metadata, Lazy.class);</span><br><span class="line">    &#x2F;&#x2F;如果Bean 定义中有@Lazy 注解，则将该Bean 预实例化属性设置为@lazy 注解的值</span><br><span class="line">    if (lazy !&#x3D; null) &#123;</span><br><span class="line">        abd.setLazyInit(lazy.getBoolean(&quot;value&quot;));</span><br><span class="line">    &#125; else if (abd.getMetadata() !&#x3D; metadata) &#123;</span><br><span class="line">        lazy &#x3D; attributesFor(abd.getMetadata(), Lazy.class);</span><br><span class="line">        if (lazy !&#x3D; null) &#123;</span><br><span class="line">            abd.setLazyInit(lazy.getBoolean(&quot;value&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果Bean 定义中有@Primary 注解，则为该Bean 设置为autowiring 自动依赖注入装配的首选对象</span><br><span class="line">    if (metadata.isAnnotated(Primary.class.getName())) &#123;</span><br><span class="line">        abd.setPrimary(true);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果Bean 定义中有@ DependsOn 注解，则为该Bean 设置所依赖的Bean 名称，</span><br><span class="line">    &#x2F;&#x2F;容器将确保在实例化该Bean 之前首先实例化所依赖的Bean</span><br><span class="line">    AnnotationAttributes dependsOn &#x3D; attributesFor(metadata, DependsOn.class);</span><br><span class="line">    if (dependsOn !&#x3D; null) &#123;</span><br><span class="line">        abd.setDependsOn(dependsOn.getStringArray(&quot;value&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    if (abd instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        AbstractBeanDefinition absBd &#x3D; (AbstractBeanDefinition) abd;</span><br><span class="line">        AnnotationAttributes role &#x3D; attributesFor(metadata, Role.class);</span><br><span class="line">        if (role !&#x3D; null) &#123;</span><br><span class="line">            absBd.setRole(role.getNumber(&quot;value&quot;).intValue());</span><br><span class="line">        &#125;</span><br><span class="line">        AnnotationAttributes description &#x3D; attributesFor(metadata, Description.class);</span><br><span class="line">        if (description !&#x3D; null) &#123;</span><br><span class="line">            absBd.setDescription(description.getString(&quot;value&quot;));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##4)、AnnotationConfigUtils 根据注解Bean 定义类中配置的作用域为其应用相应的代理策略<br>AnnotationConfigUtils 类的applyScopedProxyMode()方法根据注解Bean 定义类中配置的作用域@Scope 注解的值，为Bean 定义应用相应的代理模式，主要是在Spring 面向切面编程(AOP)中使用。源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;根据作用域为Bean 应用引用的代码模式</span><br><span class="line">static BeanDefinitionHolder applyScopedProxyMode(</span><br><span class="line">        ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    &#x2F;&#x2F;获取注解Bean 定义类中@Scope 注解的proxyMode 属性值</span><br><span class="line">    ScopedProxyMode scopedProxyMode &#x3D; metadata.getScopedProxyMode();</span><br><span class="line">    &#x2F;&#x2F;如果配置的@Scope 注解的proxyMode 属性值为NO，则不应用代理模式</span><br><span class="line">    if (scopedProxyMode.equals(ScopedProxyMode.NO)) &#123;</span><br><span class="line">        return definition;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取配置的@Scope 注解的proxyMode 属性值，如果为TARGET_CLASS</span><br><span class="line">    &#x2F;&#x2F;则返回true，如果为INTERFACES，则返回false</span><br><span class="line">    boolean proxyTargetClass &#x3D; scopedProxyMode.equals(ScopedProxyMode.TARGET_CLASS);</span><br><span class="line">    &#x2F;&#x2F;为注册的Bean 创建相应模式的代理对象</span><br><span class="line">    return ScopedProxyCreator.createScopedProxy(definition, registry, proxyTargetClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段为Bean 引用创建相应模式的代理，这里不做深入的分析。<br>##5)、BeanDefinitionReaderUtils 向容器注册Bean<br>BeanDefinitionReaderUtils 主要是校验BeanDefinition 信息，然后将Bean 添加到容器中一个管理BeanDefinition 的HashMap 中。<br>#扫描指定包并解析为BeanDefinition<br>当创建注解处理容器时，如果传入的初始参数是注解Bean 定义类所在的包时，注解容器将扫描给定的包及其子包，将扫描到的注解Bean 定义载入并注册。<br>##1)、ClassPathBeanDefinitionScanner 扫描给定的包及其子包<br>AnnotationConfigApplicationContext 通过调用类路径Bean 定义扫描器ClassPathBeanDefinitionScanner 扫描给定包及其子包下的所有类，主要源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">public class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider &#123;</span><br><span class="line">    &#x2F;&#x2F;创建一个类路径Bean 定义扫描器</span><br><span class="line">    public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">        this(registry, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;为容器创建一个类路径Bean 定义扫描器，并指定是否使用默认的扫描过滤规则。</span><br><span class="line">    &#x2F;&#x2F;即Spring 默认扫描配置：@Component、@Repository、@Service、@Controller</span><br><span class="line">    &#x2F;&#x2F;注解的Bean，同时也支持JavaEE6 的@ManagedBean 和JSR-330 的@Named 注解</span><br><span class="line">    public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters) &#123;</span><br><span class="line">        this(registry, useDefaultFilters, getOrCreateEnvironment(registry));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,</span><br><span class="line">                                          Environment environment) &#123;</span><br><span class="line">        this(registry, useDefaultFilters, environment,</span><br><span class="line">                (registry instanceof ResourceLoader ? (ResourceLoader) registry : null));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,</span><br><span class="line">                                          Environment environment, @Nullable ResourceLoader resourceLoader) &#123;</span><br><span class="line">        Assert.notNull(registry, &quot;BeanDefinitionRegistry must not be null&quot;);</span><br><span class="line">        &#x2F;&#x2F;为容器设置加载Bean 定义的注册器</span><br><span class="line">        this.registry &#x3D; registry;</span><br><span class="line">        if (useDefaultFilters) &#123;</span><br><span class="line">            registerDefaultFilters();</span><br><span class="line">        &#125;</span><br><span class="line">        setEnvironment(environment);</span><br><span class="line">        &#x2F;&#x2F;为容器设置资源加载器</span><br><span class="line">        setResourceLoader(resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;调用类路径Bean 定义扫描器入口方法</span><br><span class="line">    public int scan(String... basePackages) &#123;</span><br><span class="line">        &#x2F;&#x2F;获取容器中已经注册的Bean 个数</span><br><span class="line">        int beanCountAtScanStart &#x3D; this.registry.getBeanDefinitionCount();</span><br><span class="line">        &#x2F;&#x2F;启动扫描器扫描给定包</span><br><span class="line">        doScan(basePackages);</span><br><span class="line">        &#x2F;&#x2F; Register annotation config processors, if necessary.</span><br><span class="line">        &#x2F;&#x2F;注册注解配置(Annotation config)处理器</span><br><span class="line">        if (this.includeAnnotationConfig) &#123;</span><br><span class="line">            AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;返回注册的Bean 个数</span><br><span class="line">        return (this.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;类路径Bean 定义扫描器扫描给定包及其子包</span><br><span class="line">    protected Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) &#123;</span><br><span class="line">        Assert.notEmpty(basePackages, &quot;At least one base package must be specified&quot;);</span><br><span class="line">        &#x2F;&#x2F;创建一个集合，存放扫描到Bean 定义的封装类</span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; beanDefinitions &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;遍历扫描所有给定的包</span><br><span class="line">        for (String basePackage : basePackages) &#123;</span><br><span class="line">            &#x2F;&#x2F;调用父类ClassPathScanningCandidateComponentProvider 的方法</span><br><span class="line">            &#x2F;&#x2F;扫描给定类路径，获取符合条件的Bean 定义</span><br><span class="line">            Set&lt;BeanDefinition&gt; candidates &#x3D; findCandidateComponents(basePackage);</span><br><span class="line">            &#x2F;&#x2F;遍历扫描到的Bean</span><br><span class="line">            for (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">                &#x2F;&#x2F;获取Bean 定义类中@Scope 注解的值，即获取Bean 的作用域</span><br><span class="line">                ScopeMetadata scopeMetadata &#x3D; this.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">                &#x2F;&#x2F;为Bean 设置注解配置的作用域</span><br><span class="line">                candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">                &#x2F;&#x2F;为Bean 生成名称</span><br><span class="line">                String beanName &#x3D; this.beanNameGenerator.generateBeanName(candidate, this.registry);</span><br><span class="line">                &#x2F;&#x2F;如果扫描到的Bean 不是Spring 的注解Bean，则为Bean 设置默认值，</span><br><span class="line">                &#x2F;&#x2F;设置Bean 的自动依赖注入装配属性等</span><br><span class="line">                if (candidate instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">                    postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;如果扫描到的Bean 是Spring 的注解Bean，则处理其通用的Spring 注解</span><br><span class="line">                if (candidate instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">                    &#x2F;&#x2F;处理注解Bean 中通用的注解，在分析注解Bean 定义类读取器时已经分析过</span><br><span class="line">                    AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;根据Bean 名称检查指定的Bean 是否需要在容器中注册，或者在容器中冲突</span><br><span class="line">                if (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                    BeanDefinitionHolder definitionHolder &#x3D; new BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">                    &#x2F;&#x2F;根据注解中配置的作用域，为Bean 应用相应的代理模式</span><br><span class="line">                    definitionHolder &#x3D;</span><br><span class="line">                            AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder,</span><br><span class="line">                                    this.registry);</span><br><span class="line">                    beanDefinitions.add(definitionHolder);</span><br><span class="line">                    &#x2F;&#x2F;向容器注册扫描到的Bean</span><br><span class="line">                    registerBeanDefinition(definitionHolder, this.registry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return beanDefinitions;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类路径Bean 定义扫描器ClassPathBeanDefinitionScanner 主要通过findCandidateComponents()方法调用其父类ClassPathScanningCandidateComponentProvider 类来扫描获取给定包及其子包下的类。<br>##2)、ClassPathScanningCandidateComponentProvider 扫描给定包及其子包的类<br>ClassPathScanningCandidateComponentProvider 类的findCandidateComponents()方法具体实现扫描给定类路径包的功能，主要源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">public class ClassPathScanningCandidateComponentProvider implements EnvironmentCapable, ResourceLoaderAware &#123;</span><br><span class="line">    &#x2F;&#x2F;保存过滤规则要包含的注解，即Spring 默认的@Component、@Repository、@Service、</span><br><span class="line">    &#x2F;&#x2F;@Controller 注解的Bean，以及JavaEE6 的@ManagedBean 和JSR-330 的@Named 注解</span><br><span class="line">    private final List&lt;TypeFilter&gt; includeFilters &#x3D; new LinkedList&lt;&gt;();</span><br><span class="line">    &#x2F;&#x2F;保存过滤规则要排除的注解</span><br><span class="line">    private final List&lt;TypeFilter&gt; excludeFilters &#x3D; new LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构造方法，该方法在子类ClassPathBeanDefinitionScanner 的构造方法中被调用</span><br><span class="line">    public ClassPathScanningCandidateComponentProvider(boolean useDefaultFilters) &#123;</span><br><span class="line">        this(useDefaultFilters, new StandardEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ClassPathScanningCandidateComponentProvider(boolean useDefaultFilters, Environment environment) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果使用Spring 默认的过滤规则，则向容器注册过滤规则</span><br><span class="line">        if (useDefaultFilters) &#123;</span><br><span class="line">            registerDefaultFilters();</span><br><span class="line">        &#125;</span><br><span class="line">        setEnvironment(environment);</span><br><span class="line">        setResourceLoader(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;向容器注册过滤规则</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    protected void registerDefaultFilters() &#123;</span><br><span class="line">        &#x2F;&#x2F;向要包含的过滤规则中添加@Component 注解类，注意Spring 中@Repository</span><br><span class="line">        &#x2F;&#x2F;@Service 和@Controller 都是Component，因为这些注解都添加了@Component 注解</span><br><span class="line">        this.includeFilters.add(new AnnotationTypeFilter(Component.class));</span><br><span class="line">        &#x2F;&#x2F;获取当前类的类加载器</span><br><span class="line">        ClassLoader cl &#x3D; ClassPathScanningCandidateComponentProvider.class.getClassLoader();</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;向要包含的过滤规则添加JavaEE6 的@ManagedBean 注解</span><br><span class="line">            this.includeFilters.add(new AnnotationTypeFilter(</span><br><span class="line">                    ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(&quot;javax.annotation.ManagedBean&quot;, cl)), false));</span><br><span class="line">            logger.debug(&quot;JSR-250 &#39;javax.annotation.ManagedBean&#39; found and supported for component scanning&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            &#x2F;&#x2F; JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;向要包含的过滤规则添加@Named 注解</span><br><span class="line">            this.includeFilters.add(new AnnotationTypeFilter(</span><br><span class="line">                    ((Class&lt;? extends Annotation&gt;) ClassUtils.forName(&quot;javax.inject.Named&quot;, cl)), false));</span><br><span class="line">            logger.debug(&quot;JSR-330 &#39;javax.inject.Named&#39; annotation found and supported for component scanning&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            &#x2F;&#x2F; JSR-330 API not available - simply skip.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;扫描给定类路径的包</span><br><span class="line">    public Set&lt;BeanDefinition&gt; findCandidateComponents(String basePackage) &#123;</span><br><span class="line">        if (this.componentsIndex !&#x3D; null &amp;&amp; indexSupportsIncludeFilters()) &#123;</span><br><span class="line">            return addCandidateComponentsFromIndex(this.componentsIndex, basePackage);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return scanCandidateComponents(basePackage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Set&lt;BeanDefinition&gt; addCandidateComponentsFromIndex(CandidateComponentsIndex index, String</span><br><span class="line">            basePackage) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建存储扫描到的类的集合</span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates &#x3D; new LinkedHashSet&lt;&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            Set&lt;String&gt; types &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">            for (TypeFilter filter : this.includeFilters) &#123;</span><br><span class="line">                String stereotype &#x3D; extractStereotype(filter);</span><br><span class="line">                if (stereotype &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    throw new IllegalArgumentException(&quot;Failed to extract stereotype from &quot; + filter);</span><br><span class="line">                &#125;</span><br><span class="line">                types.addAll(index.getCandidateTypes(basePackage, stereotype));</span><br><span class="line">            &#125;</span><br><span class="line">            boolean traceEnabled &#x3D; logger.isTraceEnabled();</span><br><span class="line">            boolean debugEnabled &#x3D; logger.isDebugEnabled();</span><br><span class="line">            for (String type : types) &#123;</span><br><span class="line">                &#x2F;&#x2F;为指定资源获取元数据读取器，元信息读取器通过汇编(ASM)读&#x2F;&#x2F;取资源元信息</span><br><span class="line">                MetadataReader metadataReader &#x3D; getMetadataReaderFactory().getMetadataReader(type);</span><br><span class="line">                &#x2F;&#x2F;如果扫描到的类符合容器配置的过滤规则</span><br><span class="line">                if (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                    &#x2F;&#x2F;通过汇编(ASM)读取资源字节码中的Bean 定义元信息</span><br><span class="line">                    AnnotatedGenericBeanDefinition sbd &#x3D; new AnnotatedGenericBeanDefinition(</span><br><span class="line">                            metadataReader.getAnnotationMetadata());</span><br><span class="line">                    if (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                        if (debugEnabled) &#123;</span><br><span class="line">                            logger.debug(&quot;Using candidate component class from index: &quot; + type);</span><br><span class="line">                        &#125;</span><br><span class="line">                        candidates.add(sbd);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (debugEnabled) &#123;</span><br><span class="line">                            logger.debug(&quot;Ignored because not a concrete top-level class: &quot; + type);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (traceEnabled) &#123;</span><br><span class="line">                        logger.trace(&quot;Ignored because matching an exclude filter: &quot; + type);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(&quot;I&#x2F;O failure during classpath scanning&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        return candidates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;判断元信息读取器读取的类是否符合容器定义的注解过滤规则</span><br><span class="line">    protected boolean isCandidateComponent(MetadataReader metadataReader) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;如果读取的类的注解在排除注解过滤规则中，返回false</span><br><span class="line">        for (TypeFilter tf : this.excludeFilters) &#123;</span><br><span class="line">            if (tf.match(metadataReader, getMetadataReaderFactory())) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;如果读取的类的注解在包含的注解的过滤规则中，则返回ture</span><br><span class="line">        for (TypeFilter tf : this.includeFilters) &#123;</span><br><span class="line">            if (tf.match(metadataReader, getMetadataReaderFactory())) &#123;</span><br><span class="line">                return isConditionMatch(metadataReader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;如果读取的类的注解既不在排除规则，也不在包含规则中，则返回false</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#注册注解BeanDefinition<br>AnnotationConfigWebApplicationContext 是AnnotationConfigApplicationContext 的Web 版，它们对于注解Bean 的注册和扫描是基本相同的，但是AnnotationConfigWebApplicationContext对注解Bean 定义的载入稍有不同，AnnotationConfigWebApplicationContext 注入注解Bean 定义源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;载入注解Bean 定义资源</span><br><span class="line">@Override</span><br><span class="line">protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) &#123;</span><br><span class="line">    &#x2F;&#x2F;为容器设置注解Bean 定义读取器</span><br><span class="line">    AnnotatedBeanDefinitionReader reader &#x3D; getAnnotatedBeanDefinitionReader(beanFactory);</span><br><span class="line">    &#x2F;&#x2F;为容器设置类路径Bean 定义扫描器</span><br><span class="line">    ClassPathBeanDefinitionScanner scanner &#x3D; getClassPathBeanDefinitionScanner(beanFactory);</span><br><span class="line">    &#x2F;&#x2F;获取容器的Bean 名称生成器</span><br><span class="line">    BeanNameGenerator beanNameGenerator &#x3D; getBeanNameGenerator();</span><br><span class="line">    &#x2F;&#x2F;为注解Bean 定义读取器和类路径扫描器设置Bean 名称生成器</span><br><span class="line">    if (beanNameGenerator !&#x3D; null) &#123;</span><br><span class="line">        reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,</span><br><span class="line">                beanNameGenerator);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取容器的作用域元信息解析器</span><br><span class="line">    ScopeMetadataResolver scopeMetadataResolver &#x3D; getScopeMetadataResolver();</span><br><span class="line">    &#x2F;&#x2F;为注解Bean 定义读取器和类路径扫描器设置作用域元信息解析器</span><br><span class="line">    if (scopeMetadataResolver !&#x3D; null) &#123;</span><br><span class="line">        reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">        scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!this.annotatedClasses.isEmpty()) &#123;</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Registering annotated classes: [&quot; +</span><br><span class="line">                    StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.register(this.annotatedClasses.toArray(new Class&lt;?&gt;[this.annotatedClasses.size()]));</span><br><span class="line">    &#125;</span><br><span class="line">    if (!this.basePackages.isEmpty()) &#123;</span><br><span class="line">        if (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(&quot;Scanning base packages: [&quot; +</span><br><span class="line">                    StringUtils.collectionToCommaDelimitedString(this.basePackages) + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]));</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取容器定义的Bean 定义资源路径</span><br><span class="line">    String[] configLocations &#x3D; getConfigLocations();</span><br><span class="line">    &#x2F;&#x2F;如果定位的Bean 定义资源路径不为空</span><br><span class="line">    if (configLocations !&#x3D; null) &#123;</span><br><span class="line">        for (String configLocation : configLocations) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F;使用当前容器的类加载器加载定位路径的字节码类文件</span><br><span class="line">                Class&lt;?&gt; clazz &#x3D; ClassUtils.forName(configLocation, getClassLoader());</span><br><span class="line">                if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(&quot;Successfully resolved class for [&quot; + configLocation + &quot;]&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                reader.register(clazz);</span><br><span class="line">            &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">                if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(&quot;Could not load class for config location [&quot; + configLocation +</span><br><span class="line">                            &quot;] - trying package scan. &quot; + ex);</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;如果容器类加载器加载定义路径的Bean 定义资源失败</span><br><span class="line">                &#x2F;&#x2F;则启用容器类路径扫描器扫描给定路径包及其子包中的类</span><br><span class="line">                int count &#x3D; scanner.scan(configLocation);</span><br><span class="line">                if (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    if (count &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                        logger.info(&quot;No annotated classes found for specified class&#x2F;package [&quot; + configLocation + &quot;]&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        logger.info(&quot;Found &quot; + count + &quot; annotated classes in package [&quot; + configLocation + &quot;]&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Spring IOC 容器注解&lt;br&gt;Spring IOC 容器对于类级别的注解和类内部的注解分以下两种处理策略：&lt;/p&gt;
&lt;p&gt;1)、类级别的注解：如@Component、@Repository、@Controller、@Service 以及JavaEE6 的@Mana</summary>
      
    
    
    
    <category term="源码" scheme="https://halomzh.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Spring" scheme="https://halomzh.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>基于Xml的IOC容器的初始化</title>
    <link href="https://halomzh.github.io/2020/09/18/%E5%9F%BA%E4%BA%8EXml%E7%9A%84IOC%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://halomzh.github.io/2020/09/18/%E5%9F%BA%E4%BA%8EXml%E7%9A%84IOC%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2020-09-18T05:06:09.000Z</published>
    <updated>2020-09-18T05:06:45.296Z</updated>
    
    <content type="html"><![CDATA[<p>IOC 容器的初始化包括BeanDefinition 的Resource 定位、加载和注册这三个基本的过程。<br>其继承体系如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/24719542-02d12bd0140643ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>ApplicationContext 允许上下文嵌套，通过保持父上下文可以维持一个上下文体系。对于Bean 的查找可以在这个上下文体系中发生，首先检查当前上下文，其次是父上下文，逐级向上，这样为不同的Spring应用提供了一个共享的Bean 定义环境。</p><p>#1、寻找入口<br>我们用的比较多的ClassPathXmlApplicationContext，通过main()方法启动:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(&quot;application.xml&quot;);</span><br></pre></td></tr></table></figure><p>先看其构造函数的调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String configLocation) throws BeansException &#123;</span><br><span class="line">    this(new String[]&#123;configLocation&#125;, true, (ApplicationContext)null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实际调用的构造函数为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, @Nullable ApplicationContext parent) throws BeansException &#123;</span><br><span class="line">    super(parent);</span><br><span class="line">    this.setConfigLocations(configLocations);</span><br><span class="line">    if (refresh) &#123;</span><br><span class="line">        this.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有像AnnotationConfigApplicationContext 、FileSystemXmlApplicationContext 、<br>XmlWebApplicationContext 等都继承自父容器AbstractApplicationContext 主要用到了装饰器模式和策略模式，最终都是调用refresh()方法。</p><p>#2、获得配置路径<br>在创建ClassPathXmlApplicationContext 容器时，构造方法做以下两项重要工作：</p><p>首先，调用父类容器的构造方法(super(parent)方法)为容器设置好Bean 资源加载器。</p><p>然后， 再调用父类AbstractRefreshableConfigApplicationContext 的setConfigLocations(configLocations)方法设置Bean 配置信息的定位路径。</p><p>通过追踪ClassPathXmlApplicationContext 的继承体系， 发现其父类的父类AbstractApplicationContext 中初始化IOC 容器所做的主要源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractApplicationContext extends DefaultResourceLoader</span><br><span class="line">        implements ConfigurableApplicationContext &#123;</span><br><span class="line">    &#x2F;&#x2F;静态初始化块，在整个容器创建过程中只执行一次</span><br><span class="line">    static &#123;</span><br><span class="line">        &#x2F;&#x2F;为了避免应用程序在Weblogic8.1 关闭时出现类加载异常加载问题，加载IOC 容</span><br><span class="line">        &#x2F;&#x2F;器关闭事件(ContextClosedEvent)类</span><br><span class="line">        ContextClosedEvent.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AbstractApplicationContext() &#123;</span><br><span class="line">        this.resourcePatternResolver &#x3D; getResourcePatternResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AbstractApplicationContext(@Nullable ApplicationContext parent) &#123;</span><br><span class="line">        this();</span><br><span class="line">        setParent(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取一个Spring Source 的加载器用于读入Spring Bean 配置信息</span><br><span class="line">    protected ResourcePatternResolver getResourcePatternResolver() &#123;</span><br><span class="line">        &#x2F;&#x2F;AbstractApplicationContext 继承DefaultResourceLoader，因此也是一个资源加载器</span><br><span class="line">        &#x2F;&#x2F;Spring 资源加载器，其getResource(String location)方法用于载入资源</span><br><span class="line">        return new PathMatchingResourcePatternResolver(this);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractApplicationContext 的默认构造方法中有调用PathMatchingResourcePatternResolver 的构造方法创建Spring 资源加载器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) &#123;</span><br><span class="line">    Assert.notNull(resourceLoader, &quot;ResourceLoader must not be null&quot;);</span><br><span class="line">    &#x2F;&#x2F;设置Spring 的资源加载器</span><br><span class="line">    this.resourceLoader &#x3D; resourceLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在设置容器的资源加载器之后，接下来ClassPathXmlApplicationContext 执行setConfigLocations()方法通过调用其父类AbstractRefreshableConfigApplicationContext 的方法进行对Bean 配置信息的定位，该方法的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Set the config locations for this application context in init-param style,</span><br><span class="line"> * i.e. with distinct locations separated by commas, semicolons or whitespace.</span><br><span class="line"> * &lt;p&gt;If not set, the implementation may use a default as appropriate.</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;处理单个资源文件路径为一个字符串的情况</span><br><span class="line">public void setConfigLocation(String location) &#123;</span><br><span class="line">    &#x2F;&#x2F;String CONFIG_LOCATION_DELIMITERS &#x3D; &quot;,; &#x2F;t&#x2F;n&quot;;</span><br><span class="line">    &#x2F;&#x2F;即多个资源文件路径之间用” ,; \t\n”分隔，解析成数组形式</span><br><span class="line">    setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Set the config locations for this application context.</span><br><span class="line"> * &lt;p&gt;If not set, the implementation may use a default as appropriate.</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;解析Bean 定义资源文件的路径，处理多个资源文件字符串数组</span><br><span class="line">public void setConfigLocations(@Nullable String... locations) &#123;</span><br><span class="line">    if (locations !&#x3D; null) &#123;</span><br><span class="line">        Assert.noNullElements(locations, &quot;Config locations must not be null&quot;);</span><br><span class="line">        this.configLocations &#x3D; new String[locations.length];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; locations.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F; resolvePath 为同一个类中将字符串解析为路径的方法</span><br><span class="line">            this.configLocations[i] &#x3D; resolvePath(locations[i]).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.configLocations &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这两个方法的源码我们可以看出，我们既可以使用一个字符串来配置多个Spring Bean 配置信息，也可以使用字符串数组，即下面两种方式都是可以的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassPathResource res &#x3D; new ClassPathResource(&quot;a.xml,b.xml&quot;);</span><br></pre></td></tr></table></figure><p>多个资源文件路径之间可以是用” , ; \t\n”等分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassPathResource res &#x3D;new ClassPathResource(new String[]&#123;&quot;a.xml&quot;,&quot;b.xml&quot;&#125;);</span><br></pre></td></tr></table></figure><p>至此，SpringIOC 容器在初始化时将配置的Bean 配置信息定位为Spring 封装的Resource。<br>#3、开始启动<br>SpringIOC 容器对Bean 配置资源的载入是从refresh()函数开始的，refresh()是一个模板方法，规定了IOC 容器的启动流程， 有些逻辑要交给其子类去实现。它对Bean 配置资源进行载入ClassPathXmlApplicationContext 通过调用其父类AbstractApplicationContext 的refresh()函数启动整个IOC 容器对Bean 定义的载入过程，现在我们来详细看看refresh()中的逻辑处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">    synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">        &#x2F;&#x2F; Prepare this context for refreshing.</span><br><span class="line">        &#x2F;&#x2F;1、调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span><br><span class="line">        prepareRefresh();</span><br><span class="line">        &#x2F;&#x2F; Tell the subclass to refresh the internal bean factory.</span><br><span class="line">        &#x2F;&#x2F;2、告诉子类启动refreshBeanFactory()方法，Bean 定义资源文件的载入从</span><br><span class="line">        &#x2F;&#x2F;子类的refreshBeanFactory()方法启动</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();</span><br><span class="line">        &#x2F;&#x2F; Prepare the bean factory for use in this context.</span><br><span class="line">        &#x2F;&#x2F;3、为BeanFactory 配置容器特性，例如类加载器、事件处理器等</span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">            &#x2F;&#x2F;4、为容器的某些子类指定特殊的BeanPost 事件处理器</span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">            &#x2F;&#x2F; Invoke factory processors registered as beans in the context.</span><br><span class="line">            &#x2F;&#x2F;5、调用所有注册的BeanFactoryPostProcessor 的Bean</span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            &#x2F;&#x2F; Register bean processors that intercept bean creation.</span><br><span class="line">            &#x2F;&#x2F;6、为BeanFactory 注册BeanPost 事件处理器.</span><br><span class="line">            &#x2F;&#x2F;BeanPostProcessor 是Bean 后置处理器，用于监听容器触发的事件</span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            &#x2F;&#x2F; Initialize message source for this context.</span><br><span class="line">            &#x2F;&#x2F;7、初始化信息源，和国际化相关.</span><br><span class="line">            initMessageSource();</span><br><span class="line">            &#x2F;&#x2F; Initialize event multicaster for this context.</span><br><span class="line">            &#x2F;&#x2F;8、初始化容器事件传播器.</span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">            &#x2F;&#x2F; Initialize other special beans in specific context subclasses.</span><br><span class="line">            &#x2F;&#x2F;9、调用子类的某些特殊Bean 初始化方法</span><br><span class="line">            onRefresh();</span><br><span class="line">            &#x2F;&#x2F; Check for listener beans and register them.</span><br><span class="line">            &#x2F;&#x2F;10、为事件传播器注册事件监听器.</span><br><span class="line">            registerListeners();</span><br><span class="line">            &#x2F;&#x2F; Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">            &#x2F;&#x2F;11、初始化所有剩余的单例Bean</span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">            &#x2F;&#x2F; Last step: publish corresponding event.</span><br><span class="line">            &#x2F;&#x2F;12、初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125; catch (BeansException ex) &#123;</span><br><span class="line">            if (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">                        &quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; Destroy already created singletons to avoid dangling resources.</span><br><span class="line">            &#x2F;&#x2F;13、销毁已创建的Bean</span><br><span class="line">            destroyBeans();</span><br><span class="line">            &#x2F;&#x2F; Reset &#39;active&#39; flag.</span><br><span class="line">            &#x2F;&#x2F;14、取消refresh 操作，重置容器的同步标识.</span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line">            &#x2F;&#x2F; Propagate exception to caller.</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we</span><br><span class="line">            &#x2F;&#x2F; might not ever need metadata for singleton beans anymore...</span><br><span class="line">            &#x2F;&#x2F;15、重设公共缓存</span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>refresh()方法主要为IOC 容器Bean 的生命周期管理提供条件，Spring IOC 容器载入Bean 配置信息从其子类容器的refreshBeanFactory() 方法启动， 所以整个refresh() 中“ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();”这句以后代码的都是注册容器的信息源和生命周期事件，我们前面说的载入就是从这句代码开始启动。</p><p>refresh()方法的主要作用是：在创建IOC 容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在refresh 之后使用的是新建立起来的IOC 容器。它类似于对IOC 容器的重启，在新建立好的容器中对容器进行初始化，对Bean 配置资源进行载入。</p><p>#4、创建容器<br>obtainFreshBeanFactory()方法调用子类容器的refreshBeanFactory()方法，启动容器载入Bean 配置信息的过程，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</span><br><span class="line">    &#x2F;&#x2F;这里使用了委派设计模式，父类定义了抽象的refreshBeanFactory()方法，具体实现调用子类容器的refreshBeanFactory()方法</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory &#x3D; getBeanFactory();</span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    return beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractApplicationContext 类中只抽象定义了refreshBeanFactory()方法，容器真正调用的是其子类AbstractRefreshableApplicationContext 实现的refreshBeanFactory()方法，方法的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected final void refreshBeanFactory() throws BeansException &#123;</span><br><span class="line">    &#x2F;&#x2F;如果已经有容器，销毁容器中的bean，关闭容器</span><br><span class="line">    if (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;创建IOC 容器</span><br><span class="line">        DefaultListableBeanFactory beanFactory &#x3D; createBeanFactory();</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        &#x2F;&#x2F;对IOC 容器进行定制化，如设置启动参数，开启注解的自动装配等</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        &#x2F;&#x2F;调用载入Bean 定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions 方法，具体的实现调用子类容器</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">            this.beanFactory &#x3D; beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        throw new ApplicationContextException(&quot;I&#x2F;O error parsing bean definition source for &quot; + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中，先判断BeanFactory 是否存在，如果存在则先销毁beans 并关闭beanFactory，接着创建DefaultListableBeanFactory，并调用loadBeanDefinitions(beanFactory)装载bean 定义。</p><p>#5、载入配置路径<br>AbstractRefreshableApplicationContext 中只定义了抽象的loadBeanDefinitions 方法，容器真正调用的是其子类AbstractXmlApplicationContext 对该方法的实现，AbstractXmlApplicationContext的主要源码如下：<br>loadBeanDefinitions() 方法同样是抽象方法， 是由其子类实现的， 也即在AbstractXmlApplicationContext 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractXmlApplicationContext extends AbstractRefreshableConfigApplicationContext &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;实现父类抽象的载入Bean 定义方法</span><br><span class="line">    @Override</span><br><span class="line">    protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;创建XmlBeanDefinitionReader，即创建Bean 读取器，并通过回调设置到容器中去，容器使用该读取器读取Bean 配置资源</span><br><span class="line">        XmlBeanDefinitionReader beanDefinitionReader &#x3D; new XmlBeanDefinitionReader(beanFactory);</span><br><span class="line">        &#x2F;&#x2F;为Bean 读取器设置Spring 资源加载器，AbstractXmlApplicationContext 的</span><br><span class="line">        &#x2F;&#x2F;祖先父类AbstractApplicationContext 继承DefaultResourceLoader，因此，容器本身也是一个资源加载器</span><br><span class="line">        beanDefinitionReader.setEnvironment(this.getEnvironment());</span><br><span class="line">        beanDefinitionReader.setResourceLoader(this);</span><br><span class="line">        &#x2F;&#x2F;为Bean 读取器设置SAX xml 解析器</span><br><span class="line">        beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));</span><br><span class="line">        &#x2F;&#x2F;当Bean 读取器读取Bean 定义的Xml 资源文件时，启用Xml 的校验机制</span><br><span class="line">        initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">        &#x2F;&#x2F;Bean 读取器真正实现加载的方法</span><br><span class="line">        loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void initBeanDefinitionReader(XmlBeanDefinitionReader reader) &#123;</span><br><span class="line">        reader.setValidating(this.validating);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Xml Bean 读取器加载Bean 配置资源</span><br><span class="line">    protected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;获取Bean 配置资源的定位</span><br><span class="line">        Resource[] configResources &#x3D; getConfigResources();</span><br><span class="line">        if (configResources !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;Xml Bean 读取器调用其父类AbstractBeanDefinitionReader 读取定位的Bean 配置资源</span><br><span class="line">            reader.loadBeanDefinitions(configResources);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 如果子类中获取的Bean 配置资源定位为空，则获取ClassPathXmlApplicationContext</span><br><span class="line">        &#x2F;&#x2F; 构造方法中setConfigLocations 方法设置的资源</span><br><span class="line">        String[] configLocations &#x3D; getConfigLocations();</span><br><span class="line">        if (configLocations !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;Xml Bean 读取器调用其父类AbstractBeanDefinitionReader 读取定位的Bean 配置资源</span><br><span class="line">            reader.loadBeanDefinitions(configLocations);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;这里又使用了一个委托模式，调用子类的获取Bean 配置资源定位的方法</span><br><span class="line">    &#x2F;&#x2F;该方法在ClassPathXmlApplicationContext 中进行实现，对于我们</span><br><span class="line">    &#x2F;&#x2F;举例分析源码的ClassPathXmlApplicationContext 没有使用该方法</span><br><span class="line">    @Nullable</span><br><span class="line">    protected Resource[] getConfigResources() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以XmlBean 读取器的其中一种策略XmlBeanDefinitionReader 为例。XmlBeanDefinitionReader 调用其父类AbstractBeanDefinitionReader 的reader.loadBeanDefinitions()方法读取Bean 配置资源。<br>由于我们使用ClassPathXmlApplicationContext 作为例子分析，因此getConfigResources 的返回值为null，因此程序执行reader.loadBeanDefinitions(configLocations)分支。</p><p>#6、分配路径处理策略<br>在XmlBeanDefinitionReader 的抽象父类AbstractBeanDefinitionReader 中定义了载入过程。<br>AbstractBeanDefinitionReader 的loadBeanDefinitions()方法源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;重载方法，调用下面的loadBeanDefinitions(String, Set&lt;Resource&gt;);方法</span><br><span class="line">@Override</span><br><span class="line">public int loadBeanDefinitions(String location) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    return loadBeanDefinitions(location, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int loadBeanDefinitions(String location, @Nullable Set&lt;Resource&gt; actualResources) throws</span><br><span class="line">        BeanDefinitionStoreException &#123;</span><br><span class="line">    &#x2F;&#x2F;获取在IOC 容器初始化过程中设置的资源加载器</span><br><span class="line">    ResourceLoader resourceLoader &#x3D; getResourceLoader();</span><br><span class="line">    if (resourceLoader &#x3D;&#x3D; null) &#123;</span><br><span class="line">        throw new BeanDefinitionStoreException(</span><br><span class="line">                &quot;Cannot import bean definitions from location [&quot; + location + &quot;]: no ResourceLoader available&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (resourceLoader instanceof ResourcePatternResolver) &#123;</span><br><span class="line">        &#x2F;&#x2F; Resource pattern matching available.</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;将指定位置的Bean 配置信息解析为Spring IOC 容器封装的资源</span><br><span class="line">            &#x2F;&#x2F;加载多个指定位置的Bean 配置信息</span><br><span class="line">            Resource[] resources &#x3D; ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">            &#x2F;&#x2F;委派调用其子类XmlBeanDefinitionReader 的方法，实现加载功能</span><br><span class="line">            int loadCount &#x3D; loadBeanDefinitions(resources);</span><br><span class="line">            if (actualResources !&#x3D; null) &#123;</span><br><span class="line">                for (Resource resource : resources) &#123;</span><br><span class="line">                    actualResources.add(resource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location pattern [&quot; + location + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return loadCount;</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(</span><br><span class="line">                    &quot;Could not resolve bean definition resource pattern [&quot; + location + &quot;]&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Can only load single resources by absolute URL.</span><br><span class="line">        &#x2F;&#x2F;将指定位置的Bean 配置信息解析为Spring IOC 容器封装的资源</span><br><span class="line">        &#x2F;&#x2F;加载单个指定位置的Bean 配置信息</span><br><span class="line">        Resource resource &#x3D; resourceLoader.getResource(location);</span><br><span class="line">        &#x2F;&#x2F;委派调用其子类XmlBeanDefinitionReader 的方法，实现加载功能</span><br><span class="line">        int loadCount &#x3D; loadBeanDefinitions(resource);</span><br><span class="line">        if (actualResources !&#x3D; null) &#123;</span><br><span class="line">            actualResources.add(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        if (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(&quot;Loaded &quot; + loadCount + &quot; bean definitions from location [&quot; + location + &quot;]&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return loadCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重载方法，调用loadBeanDefinitions(String);</span><br><span class="line">@Override</span><br><span class="line">public int loadBeanDefinitions(String... locations) throws BeanDefinitionStoreException &#123;</span><br><span class="line">    Assert.notNull(locations, &quot;Location array must not be null&quot;);</span><br><span class="line">    int counter &#x3D; 0;</span><br><span class="line">    for (String location : locations) &#123;</span><br><span class="line">        counter +&#x3D; loadBeanDefinitions(location);</span><br><span class="line">    &#125;</span><br><span class="line">    return counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractRefreshableConfigApplicationContext 的loadBeanDefinitions(Resource…resources) 方法实际上是调用AbstractBeanDefinitionReader 的loadBeanDefinitions()方法。<br>从对AbstractBeanDefinitionReader 的loadBeanDefinitions()方法源码分析可以看出该方法就做了两件事：<br>首先，调用资源加载器的获取资源方法resourceLoader.getResource(location)，获取到要加载的资源。<br>其次，真正执行加载功能是其子类XmlBeanDefinitionReader 的loadBeanDefinitions()方法。在loadBeanDefinitions()方法中调用了AbstractApplicationContext 的getResources()方法，跟进去之后发现getResources()方法其实定义在ResourcePatternResolver 中，此时，我们有必要来看一下ResourcePatternResolver 的全类图：<br><img src="https://upload-images.jianshu.io/upload_images/24719542-17e22cf5186678b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/24719542-c14cf25265e3e677.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>从上面可以看到ResourceLoader 与ApplicationContext 的继承关系，可以看出其实际调用的是DefaultResourceLoader 中的getSource() 方法定位Resource ， 因为ClassPathXmlApplicationContext 本身就是DefaultResourceLoader 的实现类，所以此时又回到了ClassPathXmlApplicationContext 中来。<br>#7、解析配置文件路径<br>XmlBeanDefinitionReader 通过调用ClassPathXmlApplicationContext 的父类DefaultResourceLoader 的getResource()方法获取要加载的资源<br>//TODO添加源码解析<br>#8、开始读取配置内容<br>继续回到XmlBeanDefinitionReader 的loadBeanDefinitions(Resource …)方法看到代表bean 文件的资源定义以后的载入过程。<br>//TODO添加源码解析<br>#9、准备文档对象<br>DocumentLoader 将Bean 配置资源转换成Document 对象<br>//TODO添加源码解析<br>#10、分配解析策略<br>XmlBeanDefinitionReader 类中的doLoadBeanDefinition()方法是从特定XML 文件中实际载入Bean 配置资源的方法，该方法在载入Bean 配置资源之后将其转换为Document 对象，接下来调用registerBeanDefinitions() 启动Spring IOC 容器对Bean 定义的解析过程。<br>//TODO添加源码解析<br>#11、将配置载入内存<br>BeanDefinitionDocumentReader 接口通过registerBeanDefinitions() 方法调用其实现类DefaultBeanDefinitionDocumentReader 对Document 对象进行解析。<br>//TODO添加源码解析<br>#12、载入<bean>元素<br>Bean 配置信息中的<import>和<alias>元素解析在DefaultBeanDefinitionDocumentReader 中已经完成，对Bean 配置信息中使用最多的<bean>元素交由BeanDefinitionParserDelegate 来解析。<br>//TODO添加源码解析<br>#13、载入<property>元素<br>BeanDefinitionParserDelegate 在解析<Bean>调用parsePropertyElements()方法解析<Bean>元素中的<property>属性子元素。<br>//TODO添加源码解析<br>#14、载入<property>的子元素<br>在BeanDefinitionParserDelegate 类中的parsePropertySubElement()方法对<property>中的子元素解析。<br>//TODO添加源码解析<br>#15、载入<list>的子元素<br>在BeanDefinitionParserDelegate 类中的parseListElement()方法就是具体实现解析<property>元素中的<list>集合子元素。<br>//TODO添加源码解析<br>#16、分配注册策略<br>让我们继续跟踪程序的执行顺序，接下来我们来分析DefaultBeanDefinitionDocumentReader 对Bean 定义转换的Document 对象解析的流程中， 在其parseDefaultElement() 方法中完成对Document 对象的解析后得到封装BeanDefinition 的BeanDefinitionHold 对象， 然后调用BeanDefinitionReaderUtils 的registerBeanDefinition() 方法向IOC 容器注册解析的Bean 。</p><p>BeanDefinitionReaderUtils 的注册的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将解析的BeanDefinitionHold 注册到容器中</span><br><span class="line">public static void registerBeanDefinition(</span><br><span class="line">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line">    &#x2F;&#x2F;获取解析的BeanDefinition 的名称</span><br><span class="line">    String beanName &#x3D; definitionHolder.getBeanName();</span><br><span class="line">    &#x2F;&#x2F;向IOC 容器注册BeanDefinition</span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">    &#x2F;&#x2F;如果解析的BeanDefinition 有别名，向容器为其注册别名</span><br><span class="line">    String[] aliases &#x3D; definitionHolder.getAliases();</span><br><span class="line">    if (aliases !&#x3D; null) &#123;</span><br><span class="line">        for (String alias : aliases) &#123;</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用BeanDefinitionReaderUtils 向IOC 容器注册解析的BeanDefinition 时，真正完成注册功能的是DefaultListableBeanFactory。</p><p>#17、向容器注册<br>DefaultListableBeanFactory 中使用一个HashMap 的集合对象存放IOC 容器中注册解析的BeanDefinition，向IOC 容器注册的主要源码如下：<br><img src="https://upload-images.jianshu.io/upload_images/24719542-7380c12d754ff550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;存储注册信息的BeanDefinition</span><br><span class="line">private final Map&lt;String, BeanDefinition&gt; beanDefinitionMap &#x3D; new ConcurrentHashMap&lt;&gt;(256);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;向IOC 容器注册解析的BeanDefiniton</span><br><span class="line">@Override</span><br><span class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</span><br><span class="line">        throws BeanDefinitionStoreException &#123;</span><br><span class="line">    Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);</span><br><span class="line">    Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);</span><br><span class="line">    &#x2F;&#x2F;校验解析的BeanDefiniton</span><br><span class="line">    if (beanDefinition instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125; catch (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Validation of bean definition failed&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BeanDefinition oldBeanDefinition;</span><br><span class="line">    oldBeanDefinition &#x3D; this.beanDefinitionMap.get(beanName);</span><br><span class="line">    if (oldBeanDefinition !&#x3D; null) &#123;</span><br><span class="line">        if (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    &quot;Cannot register bean definition [&quot; + beanDefinition + &quot;] for bean &#39;&quot; + beanName +</span><br><span class="line">                            &quot;&#39;: There is already [&quot; + oldBeanDefinition + &quot;] bound.&quot;);</span><br><span class="line">        &#125; else if (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            &#x2F;&#x2F; e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span><br><span class="line">            if (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">                this.logger.warn(&quot;Overriding user-defined bean definition for bean &#39;&quot; + beanName +</span><br><span class="line">                        &quot;&#39; with a framework-generated bean definition: replacing [&quot; +</span><br><span class="line">                        oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (!beanDefinition.equals(oldBeanDefinition)) &#123;</span><br><span class="line">            if (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">                this.logger.info(&quot;Overriding bean definition for bean &#39;&quot; + beanName +</span><br><span class="line">                        &quot;&#39; with a different definition: replacing [&quot; + oldBeanDefinition +</span><br><span class="line">                        &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">                this.logger.debug(&quot;Overriding bean definition for bean &#39;&quot; + beanName +</span><br><span class="line">                        &quot;&#39; with an equivalent definition: replacing [&quot; + oldBeanDefinition +</span><br><span class="line">                        &quot;] with [&quot; + beanDefinition + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (hasBeanCreationStarted()) &#123;</span><br><span class="line">            &#x2F;&#x2F;注册的过程中需要线程同步，以保证数据的一致性</span><br><span class="line">            synchronized (this.beanDefinitionMap) &#123;</span><br><span class="line">                this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">                List&lt;String&gt; updatedDefinitions &#x3D; new ArrayList&lt;&gt;(this.beanDefinitionNames.size() + 1);</span><br><span class="line">                updatedDefinitions.addAll(this.beanDefinitionNames);</span><br><span class="line">                updatedDefinitions.add(beanName);</span><br><span class="line">                this.beanDefinitionNames &#x3D; updatedDefinitions;</span><br><span class="line">                if (this.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">                    Set&lt;String&gt; updatedSingletons &#x3D; new LinkedHashSet&lt;&gt;(this.manualSingletonNames);</span><br><span class="line">                    updatedSingletons.remove(beanName);</span><br><span class="line">                    this.manualSingletonNames &#x3D; updatedSingletons;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            this.beanDefinitionNames.add(beanName);</span><br><span class="line">            this.manualSingletonNames.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        this.frozenBeanDefinitionNames &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;检查是否有同名的BeanDefinition 已经在IOC 容器中注册</span><br><span class="line">    if (oldBeanDefinition !&#x3D; null || containsSingleton(beanName)) &#123;</span><br><span class="line">        &#x2F;&#x2F;重置所有已经注册过的BeanDefinition 的缓存</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，Bean 配置信息中配置的Bean 被解析过后，已经注册到IOC 容器中，被容器管理起来，真正完成了IOC 容器初始化所做的全部工作。现在IOC 容器中已经建立了整个Bean 的配置信息，这些BeanDefinition 信息已经可以使用，并且可以被检索，IOC 容器的作用就是对这些注册的Bean 定义信息进行处理和维护。这些的注册的Bean 定义信息是IOC 容器控制反转的基础，正是有了这些注册的数据，容器才可以进行依赖注入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;IOC 容器的初始化包括BeanDefinition 的Resource 定位、加载和注册这三个基本的过程。&lt;br&gt;其继承体系如下图所示：&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2471954</summary>
      
    
    
    
    <category term="源码" scheme="https://halomzh.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Spring" scheme="https://halomzh.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring核心容器类</title>
    <link href="https://halomzh.github.io/2020/09/18/Spring%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    <id>https://halomzh.github.io/2020/09/18/Spring%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%B1%BB/</id>
    <published>2020-09-18T04:51:14.000Z</published>
    <updated>2020-09-18T05:02:18.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、BeanFactory"><a href="#1、BeanFactory" class="headerlink" title="1、BeanFactory"></a>1、BeanFactory</h1><p><img src="https://upload-images.jianshu.io/upload_images/24719542-2fb5053e70f253b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>其中BeanFactory 作为最顶层的一个接口类，它定义了IOC 容器的基本功能规范，BeanFactory 有三个重要的子类：ListableBeanFactory、HierarchicalBeanFactory 和AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是DefaultListableBeanFactory，它实现了所有的接口。</p><h2 id="1、ListableBeanFactory-接口表示这些Bean-是可列表化的"><a href="#1、ListableBeanFactory-接口表示这些Bean-是可列表化的" class="headerlink" title="1、ListableBeanFactory 接口表示这些Bean 是可列表化的"></a>1、ListableBeanFactory 接口表示这些Bean 是可列表化的</h2><p><img src="https://upload-images.jianshu.io/upload_images/24719542-4abb36abff2b0ef8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="2、HierarchicalBeanFactory-表示的是这些Bean-是有继承关系的，也就是每个Bean-有可能有父Bean"><a href="#2、HierarchicalBeanFactory-表示的是这些Bean-是有继承关系的，也就是每个Bean-有可能有父Bean" class="headerlink" title="2、HierarchicalBeanFactory 表示的是这些Bean 是有继承关系的，也就是每个Bean 有可能有父Bean"></a>2、HierarchicalBeanFactory 表示的是这些Bean 是有继承关系的，也就是每个Bean 有可能有父Bean</h2><p><img src="https://upload-images.jianshu.io/upload_images/24719542-22a0f789f8bc1c6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="3、AutowireCapableBeanFactory-接口定义Bean-的自动装配规则"><a href="#3、AutowireCapableBeanFactory-接口定义Bean-的自动装配规则" class="headerlink" title="3、AutowireCapableBeanFactory 接口定义Bean 的自动装配规则"></a>3、AutowireCapableBeanFactory 接口定义Bean 的自动装配规则</h2><p><img src="https://upload-images.jianshu.io/upload_images/24719542-c46ef2c592dba6ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这三个接口共同定义了Bean 的集合、Bean 之间的关系、以及Bean 行为。</p><p>在BeanFactory 里只对IOC 容器的基本行为作了定义，根本不关心你的Bean 是如何定义怎样加载的。</p><p>而要知道工厂是如何产生对象的，我们需要看具体的IOC 容器实现，Spring 提供了许多IOC 容器的实现。比如GenericApplicationContext ， ClasspathXmlApplicationContext 等。</p><h1 id="2、BeanDefinition"><a href="#2、BeanDefinition" class="headerlink" title="2、BeanDefinition"></a>2、BeanDefinition</h1><p>SpringIOC 容器管理了我们定义的各种Bean 对象及其相互的关系，Bean 对象在Spring 实现中是以BeanDefinition 来描述的。</p><p><img src="https://upload-images.jianshu.io/upload_images/24719542-7373a5c6418ae465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="3、BeanDefinitionReader"><a href="#3、BeanDefinitionReader" class="headerlink" title="3、BeanDefinitionReader"></a>3、BeanDefinitionReader</h1><p>Bean 的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方很多，必须保证有足够的灵活性，以应对可能的变化。Bean 的解析主要就是对Spring 配置文件的解析。这个解析过程主要通过BeanDefintionReader 来完成。</p><p><img src="https://upload-images.jianshu.io/upload_images/24719542-7802218e5157371d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、BeanFactory&quot;&gt;&lt;a href=&quot;#1、BeanFactory&quot; class=&quot;headerlink&quot; title=&quot;1、BeanFactory&quot;&gt;&lt;/a&gt;1、BeanFactory&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://upload-i</summary>
      
    
    
    
    <category term="源码" scheme="https://halomzh.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Spring" scheme="https://halomzh.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
