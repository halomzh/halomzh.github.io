<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>halomzh.github.io</title>
  
  
  <link href="https://halomzh.github.io/atom.xml" rel="self"/>
  
  <link href="https://halomzh.github.io/"/>
  <updated>2020-09-18T05:02:18.818Z</updated>
  <id>https://halomzh.github.io/</id>
  
  <author>
    <name>halomzh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring核心容器类</title>
    <link href="https://halomzh.github.io/2020/09/18/Spring%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    <id>https://halomzh.github.io/2020/09/18/Spring%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%B1%BB/</id>
    <published>2020-09-18T04:51:14.000Z</published>
    <updated>2020-09-18T05:02:18.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、BeanFactory"><a href="#1、BeanFactory" class="headerlink" title="1、BeanFactory"></a>1、BeanFactory</h1><p><img src="https://upload-images.jianshu.io/upload_images/24719542-2fb5053e70f253b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>其中BeanFactory 作为最顶层的一个接口类，它定义了IOC 容器的基本功能规范，BeanFactory 有三个重要的子类：ListableBeanFactory、HierarchicalBeanFactory 和AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是DefaultListableBeanFactory，它实现了所有的接口。</p><h2 id="1、ListableBeanFactory-接口表示这些Bean-是可列表化的"><a href="#1、ListableBeanFactory-接口表示这些Bean-是可列表化的" class="headerlink" title="1、ListableBeanFactory 接口表示这些Bean 是可列表化的"></a>1、ListableBeanFactory 接口表示这些Bean 是可列表化的</h2><p><img src="https://upload-images.jianshu.io/upload_images/24719542-4abb36abff2b0ef8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="2、HierarchicalBeanFactory-表示的是这些Bean-是有继承关系的，也就是每个Bean-有可能有父Bean"><a href="#2、HierarchicalBeanFactory-表示的是这些Bean-是有继承关系的，也就是每个Bean-有可能有父Bean" class="headerlink" title="2、HierarchicalBeanFactory 表示的是这些Bean 是有继承关系的，也就是每个Bean 有可能有父Bean"></a>2、HierarchicalBeanFactory 表示的是这些Bean 是有继承关系的，也就是每个Bean 有可能有父Bean</h2><p><img src="https://upload-images.jianshu.io/upload_images/24719542-22a0f789f8bc1c6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="3、AutowireCapableBeanFactory-接口定义Bean-的自动装配规则"><a href="#3、AutowireCapableBeanFactory-接口定义Bean-的自动装配规则" class="headerlink" title="3、AutowireCapableBeanFactory 接口定义Bean 的自动装配规则"></a>3、AutowireCapableBeanFactory 接口定义Bean 的自动装配规则</h2><p><img src="https://upload-images.jianshu.io/upload_images/24719542-c46ef2c592dba6ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这三个接口共同定义了Bean 的集合、Bean 之间的关系、以及Bean 行为。</p><p>在BeanFactory 里只对IOC 容器的基本行为作了定义，根本不关心你的Bean 是如何定义怎样加载的。</p><p>而要知道工厂是如何产生对象的，我们需要看具体的IOC 容器实现，Spring 提供了许多IOC 容器的实现。比如GenericApplicationContext ， ClasspathXmlApplicationContext 等。</p><h1 id="2、BeanDefinition"><a href="#2、BeanDefinition" class="headerlink" title="2、BeanDefinition"></a>2、BeanDefinition</h1><p>SpringIOC 容器管理了我们定义的各种Bean 对象及其相互的关系，Bean 对象在Spring 实现中是以BeanDefinition 来描述的。</p><p><img src="https://upload-images.jianshu.io/upload_images/24719542-7373a5c6418ae465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="3、BeanDefinitionReader"><a href="#3、BeanDefinitionReader" class="headerlink" title="3、BeanDefinitionReader"></a>3、BeanDefinitionReader</h1><p>Bean 的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方很多，必须保证有足够的灵活性，以应对可能的变化。Bean 的解析主要就是对Spring 配置文件的解析。这个解析过程主要通过BeanDefintionReader 来完成。</p><p><img src="https://upload-images.jianshu.io/upload_images/24719542-7802218e5157371d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、BeanFactory&quot;&gt;&lt;a href=&quot;#1、BeanFactory&quot; class=&quot;headerlink&quot; title=&quot;1、BeanFactory&quot;&gt;&lt;/a&gt;1、BeanFactory&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://upload-i</summary>
      
    
    
    
    <category term="源码" scheme="https://halomzh.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Spring" scheme="https://halomzh.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
